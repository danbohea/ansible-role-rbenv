---

- name: Install rbenv & associated packages via Homebrew.
  homebrew: name={{ item }}
  with_items: "{{ rbenv_brew_packages }}"
  notify: brew cleanup

# The command module gets a fair bit of use below as we need to tell bash to run
# the command as if we were in a login shell (to make sure rbenv kicks in).

- name: Install Ruby via rbenv.
  command: bash -lc "rbenv install {{ rbenv_default_ruby_version }}"
           creates=/Users/{{ ansible_env.USER }}/.rbenv/versions/{{ rbenv_default_ruby_version }}

- name: Check what the current global Ruby version is via rbenv.
  command: bash -lc "rbenv global"
  register: rbenv_global
  changed_when: rbenv_global.stdout != rbenv_default_ruby_version

- name: Set the global Ruby version.
  command: bash -lc "rbenv global {{ rbenv_default_ruby_version }} && rbenv rehash"
  when: rbenv_global.stdout != rbenv_default_ruby_version

# NOTE: We must set user_install=no to install gems to
# ~/.rbenv/versions/{{ rbenv_ruby_version }}/lib/ruby/gems/.
# If not, gems are installed to /usr/local/lib/ruby/gems/ (no good).
# Credit: https://github.com/hnakamur/ansible-role-osx-rbenv
- name: Install default gems to global Ruby version.
  gem: name={{ item }} state=latest user_install=no executable=~/.rbenv/shims/gem
  with_items: "{{ rbenv_global_gems }}"
  notify: rbenv rehash
