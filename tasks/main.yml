---

- name: "Install rbenv & ruby-build via Homebrew."
  homebrew: name={{ item }}
  with_items:
    - rbenv
    - ruby-build
  notify: brew cleanup

# The command module gets a fair bit of use below as we need to tell bash to run
# the command as if we were in a login shell (to make sure rbenv kicks in).

- name: Install Ruby via rbenv.
  shell: >
    eval "$(rbenv init -)";
    rbenv install {{ rbenv_default_ruby_version }}
    creates=/Users/{{ ansible_env.USER }}/.rbenv/versions/{{ rbenv_default_ruby_version }}

- name: Ensure required eval line is in .bash_profile.
  lineinfile:
    path: "/Users/{{ ansible_env.USER }}/.bash_profile"
    line: "eval \"$(rbenv init -)\""

- name: Check the current rbenv global Ruby version.
  shell: >
    eval "$(rbenv init -)";
    rbenv global
  register: rbenv_global
  changed_when: rbenv_global.stdout != rbenv_default_ruby_version

- name: Set the global rbenv Ruby version.
  shell: >
    eval "$(rbenv init -)";
    rbenv global {{ rbenv_default_ruby_version }} && rbenv rehash
  when: rbenv_global.stdout != rbenv_default_ruby_version

# NOTE: We must set user_install=no to install gems to
# ~/.rbenv/versions/{{ rbenv_ruby_version }}/lib/ruby/gems/.
# If not, gems are installed to /usr/local/lib/ruby/gems/ (no good).
# Credit: https://github.com/hnakamur/ansible-role-osx-rbenv
- name: Install default gems to global rbenv Ruby version.
  gem: name={{ item }} state=latest user_install=no executable=~/.rbenv/shims/gem
  with_items: "{{ rbenv_global_gems }}"
  notify: rbenv rehash
